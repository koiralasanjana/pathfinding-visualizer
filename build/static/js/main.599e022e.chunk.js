(this["webpackJsonppathfinding-visualizer"]=this["webpackJsonppathfinding-visualizer"]||[]).push([[0],{10:function(e,t,a){e.exports=a(24)},15:function(e,t,a){},21:function(e,t,a){},22:function(e,t,a){},23:function(e,t,a){},24:function(e,t,a){"use strict";a.r(t);var n=a(0),i=a.n(n),r=a(9),s=a.n(r);a(15),Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(16),a(17);var o,l=a(2),c=a(1),h=a(3),u=a(4),d=a(6),m=a(5),g=(a(21),a(22),function(e){Object(d.a)(a,e);var t=Object(m.a)(a);function a(e){var n;return Object(h.a)(this,a),(n=t.call(this,e)).state={},n}return Object(u.a)(a,[{key:"render",value:function(){var e,t=this.props,a=t.row,n=t.col,r=t.isStart,s=t.isFinish,o=t.isWall,l=t.isVisited,c=t.isShortest,h=t.onMouseEnter,u=t.onMouseDown,d=t.onMouseUp,m=t.width,g=t.height,f=t.numRows,v=t.numColumns,p=r?"node node-start":s?"node node-finish":o?"node-wall":c?"node node-shortest-path":l?"node node-visited":"node",b=Math.floor((m-15)/v);return m>1500||m>1e3?e=Math.floor((g-70)/f):m>500?e=Math.floor((g-60)/f):m>0&&(e=Math.floor((g-50)/f)),i.a.createElement("div",{id:"node-".concat(a,"-").concat(n),className:"".concat(p),style:{"--width":"".concat(b,"px"),"--height":"".concat(e,"px")},onMouseEnter:function(){return h(a,n)},onMouseDown:function(){return u(a,n)},onMouseUp:function(){return d()}})}}]),a}(n.Component)),f=(a(23),window.innerWidth>600?"Pathfinding Visualizer":"Pathfinder"),v=function(e){Object(d.a)(a,e);var t=Object(m.a)(a);function a(){var e;Object(h.a)(this,a);for(var n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];return(e=t.call.apply(t,[this].concat(i))).state={algorithm:"Visualize Algorithm",maze:"Generate Maze",pathState:!1,mazeState:!1,speedState:"Speed"},e}return Object(u.a)(a,[{key:"selectAlgorithm",value:function(e){this.props.visualizingAlgorithm||(e===this.state.algorithm||"Visualize Algorithm"===this.state.algorithm||"Select an Algorithm!"===this.state.algorithm?this.setState({algorithm:e}):this.state.pathState?(this.clearPath(),this.setState({algorithm:e})):this.setState({algorithm:e}))}},{key:"selectMaze",value:function(e){this.props.visualizingAlgorithm||this.props.generatingMaze||(e===this.state.maze||"Generate Maze"===this.state.maze||"Select a Maze!"===this.state.maze?this.setState({maze:e}):this.state.mazeState?(this.clearGrid(),this.setState({maze:e})):this.setState({maze:e}))}},{key:"visualizeAlgorithm",value:function(){this.props.visualizingAlgorithm||this.props.generatingMaze||(this.state.pathState?this.clearTemp():"Visualize Algorithm"===this.state.algorithm||"Select an Algorithm!"===this.state.algorithm?this.setState({algorithm:"Select an Algorithm!"}):(this.setState({pathState:!0}),"Visualize Dijkstra"===this.state.algorithm&&this.props.visualizeDijkstra()))}},{key:"generateMaze",value:function(){this.props.visualizingAlgorithm||this.props.generatingMaze||((this.state.mazeState||this.state.pathState)&&this.clearTemp(),"Generate Maze"===this.state.maze||"Select a Maze!"===this.state.maze?this.setState({maze:"Select a Maze!"}):(this.setState({mazeState:!0}),"Generate Recursive Maze"===this.state.maze&&this.props.generateRecursiveDivisionMaze()))}},{key:"clearGrid",value:function(){this.props.visualizingAlgorithm||this.props.generatingMaze||(this.props.clearGrid(),this.setState({algorithm:"Visualize Algorithm",maze:"Generate Maze",pathState:!1,mazeState:!1}))}},{key:"clearPath",value:function(){this.props.visualizingAlgorithm||this.props.generatingMaze||(this.props.clearPath(),this.setState({pathState:!1,mazeState:!1}))}},{key:"clearTemp",value:function(){this.props.visualizingAlgorithm||this.props.generatingMaze||(this.props.clearGrid(),this.setState({pathState:!1,mazeState:!1}))}},{key:"changeSpeed",value:function(e){if(!this.props.visualizingAlgorithm&&!this.props.generatingMaze){var t=[10,10];"Slow"===e?t=[50,30]:"Medium"===e?t=[25,20]:"Fast"===e&&(t=[10,10]),this.setState({speedState:e}),this.props.updateSpeed(t[0],t[1])}}},{key:"render",value:function(){var e=this;return i.a.createElement("nav",{className:"navbar-fixed-top navbar navbar-expand navbar-dark bg-dark "},i.a.createElement("a",{className:"navbar-brand h1 mb-0",href:"#"}," ",f),i.a.createElement("div",{className:"navbar-collapse",id:"navbarNavDropdown"},i.a.createElement("ul",{className:"navbar-nav"},i.a.createElement("li",{className:"nav-item dropdown"},i.a.createElement("div",{className:"dropdown"},i.a.createElement("button",{className:"btn btn-light dropdown-toggle",type:"button",id:"dropdownMenu1","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Algorithms"),i.a.createElement("div",{className:"dropdown-menu","aria-labelledby":"dropdownMenu1"},i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.selectAlgorithm("Visualize Dijkstra")}},"Dijkstra's Algorithm")),i.a.createElement("div",{className:"dropdown-menu","aria-labelledby":"dropdownMenu2"},i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.selectAlgorithm("Visualize Dijkstra")}},"Dijkstra's Algorithm")))," "),i.a.createElement("li",null,i.a.createElement("button",{type:"button",className:"btn btn-success",onClick:function(){return e.visualizeAlgorithm()}},this.state.algorithm)),i.a.createElement("li",{className:"nav-item dropdown"},i.a.createElement("div",{className:"dropdown"},i.a.createElement("button",{className:"btn btn-light dropdown-toggle",type:"button",id:"dropdownMenu1","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},"Mazes"),i.a.createElement("div",{className:"dropdown-menu","aria-labelledby":"dropdownMenu1"},i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.selectMaze("Generate Recursive Maze")}},"Recursive Division Maze")))," "),i.a.createElement("li",null,i.a.createElement("button",{type:"button",className:"btn btn-success",onClick:function(){return e.generateMaze()}},this.state.maze)),i.a.createElement("li",null,i.a.createElement("button",{type:"button",className:"btn btn-danger",onClick:function(){return e.clearGrid()}},"Clear Gird")),i.a.createElement("li",{className:"nav-item dropdown"},i.a.createElement("div",{className:"dropdown"},i.a.createElement("button",{className:"btn btn-info dropdown-toggle",type:"button",id:"dropdownMenu1","data-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},this.state.speedState),i.a.createElement("div",{className:"dropdown-menu","aria-labelledby":"dropdownMenu1"},i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.changeSpeed("Slow")}},"Slow"),i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.changeSpeed("Medium")}},"Medium"),i.a.createElement("button",{className:"dropdown-item btn-light",type:"button",onClick:function(){return e.changeSpeed("Fast")}},"Fast")))," "),i.a.createElement("li",null,i.a.createElement("button",{type:"button",className:"btn btn-success learn-btn"},i.a.createElement("a",{href:"#learn"},"Learn More"))))))}}]),a}(n.Component);function p(e,t,a){if(!t||!a||t===a)return!1;t.distance=0;for(var n=function(e){var t,a=[],n=Object(c.a)(e);try{for(n.s();!(t=n.n()).done;){var i,r=t.value,s=Object(c.a)(r);try{for(s.s();!(i=s.n()).done;){var o=i.value;a.push(o)}}catch(l){s.e(l)}finally{s.f()}}}catch(l){n.e(l)}finally{n.f()}return a}(e),i=[];0!==n.length;){n.sort((function(e,t){return e.distance-t.distance}));var r=n.shift();if(!r.isWall){if(r.distance===1/0)return i;if(r===a)return i;r.isVisited=!0,i.push(r),b(r,e)}}}function b(e,t){var a,n=function(e,t){var a=[],n=e.row,i=e.col;0!==n&&a.push(t[n-1][i]);i!==t[0].length-1&&a.push(t[n][i+1]);n!==t.length-1&&a.push(t[n+1][i]);0!==i&&a.push(t[n][i-1]);return a.filter((function(e){return!e.isWall})).filter((function(e){return!e.isVisited}))}(e,t),i=Object(c.a)(n);try{for(i.s();!(a=i.n()).done;){var r=a.value;r.distance=e.distance+1,r.previousNode=e}}catch(s){i.e(s)}finally{i.f()}}function M(e,t,a){if(!t||!a||t===a)return!1;var n=z(e[0].length),i=z(e.length);return o=[],function e(t,a,n,i,r){if(t.length<2||a.length<2)return;var s,o;t.length>a.length&&(s=0,o=w(t));t.length<=a.length&&(s=1,o=w(a));0===s?(y(s,o,t,a,i,r),e(t.slice(0,t.indexOf(o)),a,n,i,r),e(t.slice(t.indexOf(o)+1),a,n,i,r)):(y(s,o,t,a,i,r),e(t,a.slice(0,a.indexOf(o)),n,i,r),e(t,a.slice(a.indexOf(o)+1),n,i,r))}(n,i,e,t,a),o}function z(e){for(var t=[],a=0;a<e;a++)t.push(a);return t}function w(e){var t=e.length-1,a=Math.floor(Math.random()*(t/2))+Math.floor(Math.random()*(t/2));return a%2===0&&(a===t?a-=1:a+=1),e[a]}function y(e,t,a,n,i,r){var s=!1,l=[];if(0===e){if(2===n.length)return;var h,u=Object(c.a)(n);try{for(u.s();!(h=u.n()).done;){var d=h.value;d===i.row&&t===i.col||d===r.row&&t===r.col?s=!0:l.push([d,t])}}catch(M){u.e(M)}finally{u.f()}}else{if(2===a.length)return;var m,g=Object(c.a)(a);try{for(g.s();!(m=g.n()).done;){var f=m.value;t===i.row&&f===i.col||t===r.row&&f===r.col?s=!0:l.push([t,f])}}catch(M){g.e(M)}finally{g.f()}}s||l.splice(function(e){var t=Math.floor(Math.random()*(e/2))+Math.floor(Math.random()*(e/2));t%2!==0&&(t===e?t-=1:t+=1);return t}(l.length),1);for(var v=0,p=l;v<p.length;v++){var b=p[v];o.push(b)}}var S=function(e,t){var a;e>1500?a=Math.floor(e/25):e>1250?a=Math.floor(e/22.5):e>1e3?a=Math.floor(e/20):e>750?a=Math.floor(e/17.5):e>500?a=Math.floor(e/15):e>250?a=Math.floor(e/12.5):e>0&&(a=Math.floor(e/10));var n=Math.floor(e/a);return[Math.floor(t/n),a]}(window.innerWidth,window.innerHeight),E=S[0],k=S[1],j=function(e,t){var a,n,i,r,s,o,l;e<t?(a=I(e),n=Math.floor(e/2),i=Math.floor(t/4),n%2!==0&&(n-=1),i%2!==0&&(i+=1),r=n+a[1][Math.floor(Math.random()*a[1].length)],s=i+[-6,-4,-2,0][Math.floor(4*Math.random())],o=n+a[0][Math.floor(Math.random()*a[0].length)],l=t-i+[0,2,4,6][Math.floor(4*Math.random())]):(a=I(t),n=Math.floor(e/4),i=Math.floor(t/2),n%2!==0&&(n-=1),i%2!==0&&(i+=1),r=n+[-6,-4,-2,0][Math.floor(4*Math.random())],s=i+a[1][Math.floor(Math.random()*a[1].length)],o=e-n+[0,2,4,6][Math.floor(4*Math.random())],l=i+a[0][Math.floor(Math.random()*a[0].length)]);return[r,s,o,l]}(E,k),A=j[0],N=j[1],O=j[2],D=j[3],C=function(e){Object(d.a)(a,e);var t=Object(m.a)(a);function a(){var e;Object(h.a)(this,a);for(var n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];return(e=t.call.apply(t,[this].concat(i))).state={grid:[],mouseIsPressed:!1,visualizingAlgorithm:!1,generatingMaze:!1,width:window.innerWidth,height:window.innerHeight,numRows:E,numColumns:k,speed:10,mazeSpeed:10},e.updateDimensions=function(){e.setState({width:window.innerWidth,height:window.innerHeight})},e.updateSpeed=function(t,a){e.setState({speed:t,mazeSpeed:a})},e.animateShortestPath=function(t,a){1===t.length&&e.setState({visualizingAlgorithm:!1});for(var n=function(n){if(n===t.length-1)return setTimeout((function(){var n=x(e.state.grid,t,a);e.setState({grid:n,visualizingAlgorithm:!1})}),n*(3*e.state.speed)),{v:void 0};var i=t[n];setTimeout((function(){document.getElementById("node-".concat(i.row,"-").concat(i.col)).className="node node-shortest-path"}),n*(3*e.state.speed))},i=1;i<t.length;i++){var r=n(i);if("object"===typeof r)return r.v}},e.animateAlgorithm=function(t,a){var n,i=e.state.grid.slice(),r=Object(c.a)(i);try{for(r.s();!(n=r.n()).done;){var s,o=n.value,h=Object(c.a)(o);try{for(h.s();!(s=h.n()).done;){var u=s.value,d=Object(l.a)(Object(l.a)({},u),{},{isVisited:!1});i[u.row][u.col]=d}}catch(v){h.e(v)}finally{h.f()}}}catch(v){r.e(v)}finally{r.f()}e.setState({grid:i});for(var m=function(n){var i=t[n];if(n===t.length)return setTimeout((function(){e.animateShortestPath(a,t)}),n*e.state.speed),{v:void 0};setTimeout((function(){document.getElementById("node-".concat(i.row,"-").concat(i.col)).className="node node-visited"}),n*e.state.speed)},g=1;g<=t.length;g++){var f=m(g);if("object"===typeof f)return f.v}},e.animateMaze=function(t){for(var a=function(a){if(a===t.length)return setTimeout((function(){e.clearGrid();var a=T(e.state.grid,t);e.setState({grid:a,generatingMaze:!1})}),a*e.state.mazeSpeed),{v:void 0};var n=t[a],i=e.state.grid[n[0]][n[1]];setTimeout((function(){document.getElementById("node-".concat(i.row,"-").concat(i.col)).className="node node-wall-animated"}),a*e.state.mazeSpeed)},n=0;n<=t.length;n++){var i=a(n);if("object"===typeof i)return i.v}},e}return Object(u.a)(a,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateDimensions);var e=V(this.state.numRows,this.state.numColumns);this.setState({grid:e})}},{key:"handleMouseDown",value:function(e,t){var a=P(this.state.grid,e,t);this.setState({grid:a,mouseIsPressed:!0})}},{key:"handleMouseEnter",value:function(e,t){if(this.state.mouseIsPressed){var a=P(this.state.grid,e,t);this.setState({grid:a,mouseIsPressed:!0})}}},{key:"handleMouseUp",value:function(){this.setState({mouseIsPressed:!1})}},{key:"clearGrid",value:function(){if(!this.state.visualizingAlgorithm&&!this.state.generatingMaze){for(var e=0;e<this.state.grid.length;e++)for(var t=0;t<this.state.grid[0].length;t++)e===A&&t===N||e===O&&t===D||(document.getElementById("node-".concat(e,"-").concat(t)).className="node");var a=V(this.state.numRows,this.state.numColumns);this.setState({grid:a,visualizingAlgorithm:!1,generatingMaze:!1})}}},{key:"clearPath",value:function(){if(!this.state.visualizingAlgorithm&&!this.state.generatingMaze){for(var e=0;e<this.state.grid.length;e++)for(var t=0;t<this.state.grid[0].length;t++)"node node-shortest-path"===document.getElementById("node-".concat(e,"-").concat(t)).className&&(document.getElementById("node-".concat(e,"-").concat(t)).className="node");var a=W(this.state.grid);this.setState({grid:a,visualizingAlgorithm:!1,generatingMaze:!1})}}},{key:"visualizeDijkstra",value:function(){var e=this;this.state.visualizingAlgorithm||this.state.generatingMaze||(this.setState({visualizingAlgorithm:!0}),setTimeout((function(){var t=e.state.grid,a=t[A][N],n=t[O][D],i=p(t,a,n),r=function(e){for(var t=[],a=e;null!==a;)t.unshift(a),a=a.previousNode;return t}(n);e.animateAlgorithm(i,r)}),this.state.speed))}},{key:"generateRecursiveDivisionMaze",value:function(){var e=this;this.state.visualizingAlgorithm||this.state.generatingMaze||(this.setState({generatingMaze:!0}),setTimeout((function(){var t=e.state.grid,a=M(t,t[A][N],t[O][D]);e.animateMaze(a)}),this.state.mazeSpeed))}},{key:"render",value:function(){var e=this,t=this.state.grid;return i.a.createElement(i.a.Fragment,null,i.a.createElement(v,{visualizingAlgorithm:this.state.visualizingAlgorithm,generatingMaze:this.state.generatingMaze,visualizeDijkstra:this.visualizeDijkstra.bind(this),generateRecursiveDivisionMaze:this.generateRecursiveDivisionMaze.bind(this),clearGrid:this.clearGrid.bind(this),clearPath:this.clearPath.bind(this),updateSpeed:this.updateSpeed.bind(this)}),i.a.createElement("div",{className:this.state.visualizingAlgorithm||this.state.generatingMaze?"grid-visualizing":"grid"},t.map((function(t,a){return i.a.createElement("div",{key:a},t.map((function(t,a){var n=t.row,r=t.col,s=t.isStart,o=t.isFinish,l=t.isVisited,c=t.isShortest,h=t.isWall;return i.a.createElement(g,{key:a,row:n,col:r,isStart:s,isFinish:o,isVisited:l,isShortest:c,isWall:h,onMouseDown:function(t,a){return e.handleMouseDown(t,a)},onMouseEnter:function(t,a){return e.handleMouseEnter(t,a)},onMouseUp:function(){return e.handleMouseUp()},width:e.state.width,height:e.state.height,numRows:e.state.numRows,numColumns:e.state.numColumns})})))}))),i.a.createElement("div",{className:"learn",id:"learn"},i.a.createElement("h1",{class:"learn_header"},"Dijkstra's Algorithm"),i.a.createElement("hr",null),i.a.createElement("br",null),i.a.createElement("p",{class:"learn_intro"},i.a.createElement("strong",null,"Dijkstra's Algorithm"),' basically starts at the node that you choose (the source node) and it analyzes the graph to find the shortest path between that node and all the other nodes in the graph. The algorithm keeps track of the currently known shortest distance from each node to the source node and it updates these values if it finds a shorter path. Once the algorithm has found the shortest path between the source node and another node, that node is marked as "visited" and added to the path. The process continues until all the nodes in the graph have been added to the path. This way, we have a path that connects the source node to all other nodes following the shortest path possible to reach each node.'),i.a.createElement("h3",{class:"algo"},"Algorithm:"),i.a.createElement("div",{class:"algo_content"},"1) Create a set sptSet (shortest path tree set) that keeps track of vertices included in the shortest-path tree, i.e., whose minimum distance from the source is calculated and finalized. Initially, this set is empty. ",i.a.createElement("br",null),"2) Assign a distance value to all vertices in the input graph. Initialize all distance values as INFINITE. Assign distance value as 0 for the source vertex so that it is picked first. ",i.a.createElement("br",null),"3) While sptSet doesn\u2019t include all vertices ",i.a.createElement("br",null),"\u2026.a) Pick a vertex u which is not there in sptSet and has a minimum distance value. ",i.a.createElement("br",null),"\u2026.b) Include u to sptSet. ",i.a.createElement("br",null),"\u2026.c) Update distance value of all adjacent vertices of u. ",i.a.createElement("br",null),"To update the distance values, iterate through all adjacent vertices. For every adjacent vertex v, if the sum of distance value of u (from source) and weight of edge u-v, is less than the distance value of v, then update the distance value of v. ",i.a.createElement("br",null))))}}]),a}(n.Component);function I(e){for(var t=[],a=2,n=5;n<e/2;n+=2)t.push(a),a+=2;var i=[];a=-2;for(var r=e/2;r<e-5;r+=2)i.push(a),a-=2;return[t,i]}var V=function(e,t){for(var a=[],n=0;n<e;n++){for(var i=[],r=0;r<t;r++)i.push(G(n,r));a.push(i)}return a},G=function(e,t){return{row:e,col:t,isStart:e===A&&t===N,isFinish:e===O&&t===D,distance:1/0,totalDistance:1/0,isVisited:!1,isShortest:!1,isWall:!1,previousNode:null}},P=function(e,t,a){var n=e.slice(),i=e[t][a],r=Object(l.a)(Object(l.a)({},i),{},{isWall:!i.isWall});return n[t][a]=r,n},T=function(e,t){var a,n=e.slice(),i=Object(c.a)(t);try{for(i.s();!(a=i.n()).done;){var r=a.value,s=e[r[0]][r[1]],o=Object(l.a)(Object(l.a)({},s),{},{isWall:!0});n[r[0]][r[1]]=o}}catch(h){i.e(h)}finally{i.f()}return n},W=function(e){var t,a=e.slice(),n=Object(c.a)(e);try{for(n.s();!(t=n.n()).done;){var i,r=t.value,s=Object(c.a)(r);try{for(s.s();!(i=s.n()).done;){var o=i.value,h=Object(l.a)(Object(l.a)({},o),{},{distance:1/0,totalDistance:1/0,isVisited:!1,isShortest:!1,previousNode:null});a[o.row][o.col]=h}}catch(u){s.e(u)}finally{s.f()}}}catch(u){n.e(u)}finally{n.f()}return a},x=function(e,t,a){var n,i=e.slice(),r=Object(c.a)(a);try{for(r.s();!(n=r.n()).done;){var s=n.value;if(!(s.row===A&&s.col===N||s.row===O&&s.col===D)){var o=Object(l.a)(Object(l.a)({},s),{},{isVisited:!0});i[s.row][s.col]=o}}}catch(g){r.e(g)}finally{r.f()}var h,u=Object(c.a)(t);try{for(u.s();!(h=u.n()).done;){var d=h.value;if(d.row===O&&d.col===D)return i;var m=Object(l.a)(Object(l.a)({},d),{},{isVisited:!1,isShortest:!0});i[d.row][d.col]=m}}catch(g){u.e(g)}finally{u.f()}},R=C;s.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(R,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[10,1,2]]]);
//# sourceMappingURL=main.599e022e.chunk.js.map