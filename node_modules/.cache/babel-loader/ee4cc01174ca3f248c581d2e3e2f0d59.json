{"ast":null,"code":"export function staircaseMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLS) {\n  const row = NUMBER_OF_ROWS;\n  let nodes = [];\n  let x = 0;\n  let w = 10;\n\n  while (w) {\n    for (let i = row - 1; i >= 1; i--) {\n      if (i === Math.floor((row - 2) / 4)) continue;\n      if (i === Math.floor((row - 2) / 1.2)) continue;\n      nodes.push(grid[i][x]);\n      x += 1;\n    }\n\n    for (let i = 1; i < row - 2; i++) {\n      if (i === Math.floor((row - 2) / 2)) continue;\n      if (i === Math.floor((row - 2) / 1.2)) continue;\n      nodes.push(grid[i][x]);\n      x += 1;\n    }\n\n    w -= 1;\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["F:/Deerwalk/semester-5/Micro Project/my-project/pathfinding-visualizer-master/src/mazeAlgorithms/staircaseMaze.js"],"names":["staircaseMaze","grid","NUMBER_OF_ROWS","NUMBER_OF_COLS","row","nodes","x","w","i","Math","floor","push"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,cAA7B,EAA6CC,cAA7C,EAA6D;AAClE,QAAMC,GAAG,GAAGF,cAAZ;AACA,MAAIG,KAAK,GAAG,EAAZ;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,EAAR;;AACA,SAAOA,CAAP,EAAU;AACR,SAAK,IAAIC,CAAC,GAAGJ,GAAG,GAAG,CAAnB,EAAsBI,CAAC,IAAI,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AACjC,UAAIA,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAW,CAACN,GAAG,GAAG,CAAP,IAAY,CAAvB,CAAV,EAAqC;AACrC,UAAII,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAW,CAACN,GAAG,GAAG,CAAP,IAAY,GAAvB,CAAV,EAAuC;AAEvCC,MAAAA,KAAK,CAACM,IAAN,CAAWV,IAAI,CAACO,CAAD,CAAJ,CAAQF,CAAR,CAAX;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,GAAG,CAA1B,EAA6BI,CAAC,EAA9B,EAAkC;AAChC,UAAIA,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAW,CAACN,GAAG,GAAG,CAAP,IAAY,CAAvB,CAAV,EAAqC;AACrC,UAAII,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAW,CAACN,GAAG,GAAG,CAAP,IAAY,GAAvB,CAAV,EAAuC;AAEvCC,MAAAA,KAAK,CAACM,IAAN,CAAWV,IAAI,CAACO,CAAD,CAAJ,CAAQF,CAAR,CAAX;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOF,KAAP;AACD","sourcesContent":["export function staircaseMaze(grid, NUMBER_OF_ROWS, NUMBER_OF_COLS) {\n  const row = NUMBER_OF_ROWS;\n  let nodes = [];\n  let x = 0;\n  let w = 10;\n  while (w) {\n    for (let i = row - 1; i >= 1; i--) {\n      if (i === Math.floor((row - 2) / 4)) continue;\n      if (i === Math.floor((row - 2) / 1.2)) continue;\n\n      nodes.push(grid[i][x]);\n      x += 1;\n    }\n    for (let i = 1; i < row - 2; i++) {\n      if (i === Math.floor((row - 2) / 2)) continue;\n      if (i === Math.floor((row - 2) / 1.2)) continue;\n\n      nodes.push(grid[i][x]);\n      x += 1;\n    }\n    w -= 1;\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}