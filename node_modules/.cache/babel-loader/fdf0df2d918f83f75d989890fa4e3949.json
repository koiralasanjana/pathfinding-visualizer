{"ast":null,"code":"export function randomMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  let walls = [];\n\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (row === startNode.row && col === startNode.col || row === finishNode.row && col === finishNode.col) continue;\n\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}","map":{"version":3,"sources":["F:/Deerwalk/semester-5/Micro Project/pathfinding-visualizer-master/src/mazeAlgorithms/randomMaze.js"],"names":["randomMaze","grid","startNode","finishNode","walls","row","length","col","Math","random","push","sort"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiD;AACtD,MAAI,CAACD,SAAD,IAAc,CAACC,UAAf,IAA6BD,SAAS,KAAKC,UAA/C,EAA2D;AACzD,WAAO,KAAP;AACD;;AACD,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,IAAI,CAACK,MAA7B,EAAqCD,GAAG,EAAxC,EAA4C;AAC1C,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAAhC,EAAwCC,GAAG,EAA3C,EAA+C;AAC7C,UACGF,GAAG,KAAKH,SAAS,CAACG,GAAlB,IAAyBE,GAAG,KAAKL,SAAS,CAACK,GAA5C,IACCF,GAAG,KAAKF,UAAU,CAACE,GAAnB,IAA0BE,GAAG,KAAKJ,UAAU,CAACI,GAFhD,EAIE;;AACF,UAAIC,IAAI,CAACC,MAAL,KAAgB,IAApB,EAA0B;AACxBL,QAAAA,KAAK,CAACM,IAAN,CAAW,CAACL,GAAD,EAAME,GAAN,CAAX;AACD;AACF;AACF;;AACDH,EAAAA,KAAK,CAACO,IAAN,CAAW,MAAMH,IAAI,CAACC,MAAL,KAAgB,GAAjC;AACA,SAAOL,KAAP;AACD","sourcesContent":["export function randomMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let walls = [];\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (\n        (row === startNode.row && col === startNode.col) ||\n        (row === finishNode.row && col === finishNode.col)\n      )\n        continue;\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}\n"]},"metadata":{},"sourceType":"module"}